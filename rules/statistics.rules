# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

"""
HiC read mapping with BWA MEM (http://bio-bwa.sourceforge.net) and WASP to remove allelic bias, with additional haplotype analysis.
"""

__author__ = ["Lucas Patel"]
__license__ = "MIT"

wildcard_constraints:
   unit = '\w+',
   bin = '(?!all)\w+'

rule calculate_statistics:
  input:
    "mapping/out/{unit}.{bin}.dedup.pairs"
  output:
    "mapping/out/{unit}.{bin}.counts.zip"
  params:
    jobname = "{unit}.{bin}.stats",
    prefix = "mapping/out/{unit}",
    bin = "{bin}",
    count = config["scripts"]["count"],
    cooler = config["software"]["cooler"]
  log:
    "mapping/log/{unit}.{bin}.stats.log"
  shell:
    "python {params.count} {input} 2>{log} && \
    python {params.count} {input} --all 2>{log} && \
    zip {params.prefix}.{params.bin}.counts.zip {params.prefix}.{params.bin}_*_intracounts.tsv 2>{log} && \
    rm {params.prefix}.{params.bin}_*_intracounts.tsv 2>{log}"
    
rule calculate_global_statistics:
  input:
    "mapping/out/{unit}.all.dedup.pairs"
  output:
    "mapping/out/{unit}.all.counts.zip"
  params:
    jobname = "{unit}.all.stats",
    prefix = "mapping/out/{unit}",
    count = config["scripts"]["count"],
    cooler = config["software"]["cooler"]
  log:
    "mapping/log/{unit}.stats.log"
  shell:
    "python {params.count} {input} 2>{log} && \
    python {params.count} {input} --all 2>{log} && \
    zip {params.prefix}.all.counts.zip {params.prefix}.all_*_intracounts.tsv 2>{log} && \
    rm {params.prefix}.all_*_intracounts.tsv 2>{log}"

rule calculate_pairing_score:
  input:
    "mapping/out/{unit}.{bin}.hic"
  output:
    "mapping/out/{unit}.{bin}.pairing.bedgraph"
  params:
    jobname = "{unit}.{bin}.calc_ps",
    prefix = "mapping/out/{unit}.{bin}",
    pairing = config["scripts"]["pairing"],
    cooler = config["software"]["cooler"],
    hic2cool = config["software"]["hic2cool"]
  log:
    "mapping/log/{unit}.{bin}.calc_ps.log"
  shell:
    "{params.hic2cool} convert {input} {params.prefix}.100k.cool -r 100000 2>{log} && \
    {params.cooler} balance {params.prefix}.100k.cool --convergence-policy store_nan 2>{log} && \
    python {params.pairing} --homolog-suffixes '' '' {params.prefix}.100k.cool 2>{log} > {output} && \
    rm {params.prefix}.100k.cool 2>{log}"

rule calculate_global_pairing_score:
  input:
    "mapping/out/{unit}.all.hic"
  output:
    "mapping/out/{unit}.all.pairing.bedgraph"
  params:
    jobname = "{unit}.calc_ps",
    prefix = "mapping/out/{unit,[^_.]+}",
    pairing = config["scripts"]["pairing"],
    cooler = config["software"]["cooler"],
    hic2cool = config["software"]["hic2cool"]
  log:
    "mapping/log/{unit}.calc_ps.log"
  shell:
    "{params.hic2cool} convert {input} {params.prefix}.100k.cool -r 100000 2>{log} && \
    {params.cooler} balance {params.prefix}.100k.cool --convergence-policy store_nan 2>{log} && \
    python {params.pairing} --homolog-suffixes '' '' {params.prefix}.100k.cool 2>{log} > {output} && \
    rm {params.prefix}.100k.cool 2>{log}"
